#!/usr/bin/python

import re
import time
import subprocess

INTERVAL = 1
CRITICAL_TIMEOUT = 60

regex = re.compile(r'^Battery \d+: (\w+), (\d+)%, (\d+:\d+:\d+) .*$')


def notify(title:str, msg: str, urgency: str = 'normal', app: str = 'battery') -> None:
    subprocess.run(['notify-send', '-u', urgency, '-a', app, title, msg])


def get_battery_info() -> tuple:
    battery_info = subprocess.run(['acpi', '-b'], capture_output=True).stdout.decode()
    result = regex.match(battery_info)

    status, charge, remaining = result.groups()
    charge = int(charge)

    return status, charge, remaining


if __name__ == "__main__":
    full_battery = False
    low_battery = False
    charging = False

    while True:
        status, charge, remaining = get_battery_info()

        if status == 'Discharging':
            if charging:
                notify('Charger unplugged', f'{remaining} remaining.', 'low')

            if charge < 5:
                notify('Critical low battery', f'System will be hibernated \nin {CRITICAL_TIMEOUT} seconds!','critical')
                for i in range(CRITICAL_TIMEOUT // INTERVAL):
                    if get_battery_info()[0] == 'Charging':
                        break
                    time.sleep(INTERVAL)
            elif not low_battery and charge < 10:
                low_battery = True
                notify('Low battery', f'Only {charge} battery remaining!', 'critical')

            charging = False
            full_battery = False

        if status == 'Charging':
            if not charging:
                notify('Charging', f'{remaining} until charged.', 'low')
            if charge == 100:
                full_battery = True
                notify('Battery full', 'Unplug charger.', 'low')

            charging = True
            low_battery = False

        time.sleep(INTERVAL)
